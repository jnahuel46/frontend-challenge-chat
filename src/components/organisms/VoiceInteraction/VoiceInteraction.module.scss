@use '../../../styles/variables' as *;
@use '../../../styles/design-tokens' as *;

.voiceContainer {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
  background: var(--bg-primary);
  color: var(--text-primary);
  padding: var(--spacing-xl);
  position: relative;

  // Add gradient overlay at bottom like in the image
  &::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: $position-gradient-height;
    background: linear-gradient(
      to top,
      $color-gradient-start 0%,
      $color-gradient-mid 30%,
      transparent 100%
    );
    pointer-events: none;
    z-index: $z-gradient;
  }
}

.aiOrbContainer {
  position: absolute;
  top: $position-voice-ai-top;
  left: 50%;
  transform: translateX(-50%);
  z-index: $z-orbs;
  transition: all 0.3s ease-in-out;

  &.speaking {
    transform: translateX(-50%) scale($scale-speaking); // Same scale as user orb (86px to 96px)
  }
}

.userOrbContainer {
  position: absolute;
  bottom: $position-voice-user-bottom;
  left: 50%;
  transform: translateX(-50%);
  z-index: $z-orbs;
}

.micButton {
  position: absolute;
  bottom: $position-mic-bottom;
  left: 50%;
  transform: translateX(-50%);
  width: $size-mic-button;
  height: $size-mic-button;
  border-radius: 50%;
  background: $color-black-80;
  border: $border-medium solid var(--teal-300);
  color: var(--teal-300);
  cursor: pointer;
  transition: all 0.3s ease-in-out;
  backdrop-filter: $blur-mic;
  z-index: $z-controls;
  display: flex;
  align-items: center;
  justify-content: center;

  &:hover {
    background: $color-black-90;
    transform: translateX(-50%) scale($scale-hover);
    box-shadow: $shadow-glow-medium $color-teal-glow;
  }

  &:active,
  &.recording {
    background: var(--teal-300);
    color: #000;
    transform: translateX(-50%) scale($scale-active);
    box-shadow: $shadow-glow-large $color-teal-intense;
  }

  svg {
    width: $size-icon-medium;
    height: $size-icon-medium;
  }
}

.statusText {
  position: absolute;
  bottom: $position-status-bottom;
  left: 50%;
  transform: translateX(-50%);
  font-size: var(--text-sm);
  font-weight: 500;
  color: var(--text-secondary);
  text-align: center;
  transition: all 0.3s ease-in-out;
  z-index: $z-controls;
}

// Override GlowingOrb animations to prevent movement
.aiOrbContainer {
  // Override internal GlowingOrb animations
  :global(.orb) {
    animation: voiceOrbGlow $duration-breathing ease-in-out infinite !important;
  }

  &.speaking :global(.orb) {
    animation: voiceOrbGlowSpeaking $duration-speaking ease-in-out infinite !important;
  }
}

// Static orb animation (no rotation)
@keyframes voiceOrbGlow {
  0%, 100% {
    transform: scale(1);
    filter: drop-shadow($shadow-glow-small $color-ai-orb-primary);
  }
  50% {
    transform: scale($scale-orb-breathing);
    filter: drop-shadow($shadow-glow-medium $color-ai-orb-glow);
  }
}

// Speaking animation (same as user orb - simple pulse)
@keyframes voiceOrbGlowSpeaking {
  0%, 100% {
    transform: scale(1);
    filter: drop-shadow($shadow-glow-medium $color-teal-speaking);
  }
  50% {
    transform: scale($scale-hover);
    filter: drop-shadow($shadow-glow-intense $color-teal-intense);
  }
}

// Mobile responsive
@media (max-width: $breakpoint-mobile) {
  .aiOrbContainer {
    top: $position-voice-ai-mobile;
  }

  .userOrbContainer {
    bottom: $position-voice-user-mobile;
  }

  .micButton {
    bottom: $position-mic-mobile;
    width: $size-mic-button-mobile;
    height: $size-mic-button-mobile;

    svg {
      width: $size-icon-small;
      height: $size-icon-small;
    }
  }

  .statusText {
    bottom: $position-status-mobile;
    font-size: var(--text-xs);
  }
}

// Desktop responsive - consider sidebar
@media (min-width: $breakpoint-desktop) {
  .voiceContainer {
    margin-left: $size-sidebar-width; // Make space for left sidebar
  }
}